apiVersion: v1
kind: List
items:
  - apiVersion: v1
    data:
      Corefile: |
        .:53 {
            errors
            health {
                lameduck 5s
            }
            ready
            kubernetes cluster.local in-addr.arpa ip6.arpa {
                endpoint https://{{ apiserver_ip }}:{{ apiserver_port }}
                tls /cert/coredns.crt /cert/coredns.key /cert/ca.crt
                pods insecure
                fallthrough in-addr.arpa ip6.arpa
            }
            prometheus :9153
            forward . /etc/resolv.conf {
              max_concurrent 1000
            }
            cache 30
            loop
            reload
            loadbalance
        }
    kind: ConfigMap
    metadata:
      name: coredns-config
      namespace: kube-system
  - apiVersion: v1
    kind: Secret
    metadata:
      name: coredns-tls
      namespace: kube-system
    data:
      tls.crt: "{{ coredns_cert.content | b64encode }}"
      tls.key: "{{ coredns_key.content | b64encode }}"
      ca.crt: "{{ coredns_ca.content | b64encode }}"
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: coredns
      namespace: kube-system
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: coredns
    rules:
      - apiGroups:
          - ""
        resources:
          - endpoints
          - services
          - pods
          - namespaces
        verbs:
          - list
          - watch
      - apiGroups:
          - discovery.k8s.io
        resources:
          - endpointslices
        verbs:
          - list
          - watch
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: coredns
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: coredns
    subjects:
      - kind: ServiceAccount
        name: coredns
        namespace: kube-system
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        prometheus.io/port: "9153"
        prometheus.io/scrape: "true"
      labels:
        k8s-app: kube-dns
      name: kube-dns
      namespace: kube-system
    spec:
      clusterIP: 10.0.4.186
      clusterIPs:
        - 10.0.4.186
      internalTrafficPolicy: Cluster
      ipFamilies:
        - IPv4
      ipFamilyPolicy: SingleStack
      ports:
        - name: dns
          port: 53
          protocol: UDP
          targetPort: 53
        - name: dns-tcp
          port: 53
          protocol: TCP
          targetPort: 53
        - name: metrics
          port: 9153
          protocol: TCP
          targetPort: 9153
      selector:
        k8s-app: coredns
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        deployment.kubernetes.io/revision: "1"
      generation: 1
      name: coredns
      namespace: kube-system
    spec:
      progressDeadlineSeconds: 600
      replicas: 2
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          k8s-app: coredns
      strategy:
        rollingUpdate:
          maxSurge: 0
          maxUnavailable: 1
        type: RollingUpdate
      template:
        metadata:
          labels:
            k8s-app: coredns
        spec:
          containers:
            - args:
                - -conf
                - /etc/coredns/Corefile
              image: coredns/coredns:1.11.1
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 5
                httpGet:
                  path: /health
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 60
                successThreshold: 1
                timeoutSeconds: 5
              name: coredns
              ports:
                - containerPort: 53
                  name: dns
                  protocol: UDP
                - containerPort: 53
                  name: dns-tcp
                  protocol: TCP
                - containerPort: 9153
                  name: metrics
                  protocol: TCP
              readinessProbe:
                httpGet:
                  path: /ready
                  port: 8181
                  scheme: HTTP
              resources:
                limits:
                  memory: 170Mi
                requests:
                  cpu: 100m
                  memory: 70Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  add:
                    - NET_BIND_SERVICE
                  drop:
                    - all
                readOnlyRootFilesystem: true
              volumeMounts:
                - mountPath: /etc/coredns
                  name: config-volume
                  readOnly: true
                - mountPath: /cert
                  name: coredns-tls
                  readOnly: true
          dnsPolicy: Default
          nodeSelector:
            kubernetes.io/os: linux
          priorityClassName: system-cluster-critical
          serviceAccountName: coredns
          tolerations:
            - key: CriticalAddonsOnly
              operator: Exists
            - effect: NoSchedule
              key: node-role.kubernetes.io/control-plane
          volumes:
            - configMap:
                items:
                  - key: Corefile
                    path: Corefile
                name: coredns-config
              name: config-volume
            - secret:
                defaultMode: 0444
                items:
                  - key: tls.crt
                    path: coredns.crt
                  - key: tls.key
                    path: coredns.key
                  - key: ca.crt
                    path: ca.crt
                secretName: coredns-tls
              name: coredns-tls
